<h1>Attendance</h1>

   {{#if (eq userType "Student")}}
        <h1>Welcome, Student  {{name}}   !</h1>
        
        <button id = "markPresentButton">mark me present</button>


    {{else if (eq userType "Professor")}}
        <h1>Welcome, Professor  {{name}} !</h1>

        <button>generate shared key</button>

        <button  id="downloadAttendanceButton" >download attendance</button>
        <h1>{{attendanceData}}</h1>
   
    {{/if}}

<script src="../../data/users/getUserInfoByID.js"></script>
    <script>
document.getElementById("markPresentButton").addEventListener("click", markPresent);


async function markPresent() {
  try {
    const pathSegments = window.location.pathname.split('/');
    const sectionId = pathSegments[2];  
    const moduleId = pathSegments[4];   
    const position = await getCurrentPosition();
    const { latitude, longitude } = position.coords;
    const response = await fetch(`/workspace/${sectionId}/modules/${moduleId}/attendance`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        latitude,
        longitude,
      }),
    });

    if (response.ok) {
      const data = await response.json();
      console.log(data.message);
    } else {
      console.error(`Failed to mark attendance. Status: ${response.status}`);
    }
  } catch (error) {
    console.error("Error marking attendance:", error);
  }
}



function getCurrentPosition() {
  return new Promise((resolve, reject) => {
    navigator.geolocation.getCurrentPosition(resolve, reject);
  });
}
    document.getElementById("downloadAttendanceButton").addEventListener("click", downloadAttendance);



async function downloadAttendance() {
    try {
          
        const pathSegments = window.location.pathname.split('/');
        const sectionId = pathSegments[2];  
        const moduleId = pathSegments[4];   
        const response = await fetch(`/workspace/${sectionId}/modules/${moduleId}/attendance`);

        if (response.ok) {
            const data = await response.json();
            console.log("Attendance data:", data.attendance);
           
        } else {
            console.error(`Failed to download attendance. Status: ${response.status}`);
        }
    } catch (error) {
        console.error("Error downloading attendance:", error);
    }
} 

const calculateDistance = (lat1, lon1, lat2, lon2) => {
  // Implementation of the Haversine formula
  // (you may want to use a library for more accurate calculations)
  const R = 6371; // Radius of the Earth in kilometers
  const dLat = toRadians(lat2 - lat1);
  const dLon = toRadians(lon2 - lon1);
  const a =
    Math.sin(dLat / 2) * Math.sin(dLat / 2) +
    Math.cos(toRadians(lat1)) *
      Math.cos(toRadians(lat2)) *
      Math.sin(dLon / 2) *
      Math.sin(dLon / 2);
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
  const distance = R * c * 1000; // Convert to meters
  return distance;
};

const toRadians = (degrees) => {
  return degrees * (Math.PI / 180);
};

if ({{#eq userType "Professor"}}true{{/eq}}) {
  window.addEventListener('load', function() {
    
    func(); 

  });
async function func(){
    const attendees = [];

        const position = await getCurrentPosition();
        console.log(position);
        const { latitude, longitude } = position.coords;
        for (const i of  {{{attendanceData}}}) {
          let d = calculateDistance(
            i.latitude,
            i.longitude,
            latitude,
            longitude
          );
          console.log("d=");
          console.log(d);
          if (d <= 0.01) {
            const attendee = await getUserByID(iterator.userId, {
              _id: 0,
              firstname: 1,
              lastname: 1,
            });

            attendees.push(attendee.firstname + " " + attendee.lastname);
          }
}

console.log(attendees)

}
    </script>