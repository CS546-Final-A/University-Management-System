<h2>Course Learning Materials</h2>
<div>
    Course Name: {{courseName}} <br>
    Course Description: {{courseDescription}}

    {{#if (eq type "Professor")}}
    <div id="uploadHeadingDiv">
        <label for="headingInput">Upload Heading</label>
        <input type="text" id="headingInput" />
        <button id="headingUploadButton">Upload Heading</button>
    </div>
    <form id="fileUploadForm">
        <select id="headingDropdown">
            {{#each headings}}
            <option value="{{this}}">{{this}}</option>
            {{/each}}
        </select>
        <label for="fileInput">Select File</label>
        <input type="file" id="fileInput" accept=".pdf" />
        <button type="submit">Submit</button>
    </form>
    <h2>Files</h2>
    {{#each files}}
    <div class="card my-4 glassEffect">
        <div class="card-header glassEffect d-flex">
            <div class="my-auto" id="heading">{{this.heading}}</div>
            <div class="my-auto fs-6 ms-3" id="fileName">{{this.fileName}}</div>
            <div class="my-auto fs-6 ms-3" id="filePath" hidden>{{this.filePath}}</div>
            <div class="ms-auto">
                <button class="btnSubmit p-2 downloadBtn">Download</button>
            </div>
        </div>
    </div>
    {{/each}}

</div>
{{/if}}
{{#if (eq type "Student")}}
<h2>Files</h2>
{{#each files}}
<div class="card my-4 glassEffect">
    <div class="card-header glassEffect d-flex">
        <div class="my-auto" id="heading">{{this.heading}}</div>
        <div class="my-auto fs-6 ms-3" id="fileName">{{this.fileName}}</div>
        <div class="my-auto fs-6 ms-3" id="filePath" hidden>{{this.filePath}}</div>
        <div class="ms-auto">
            <button class="btnSubmit p-2 downloadBtn">Download</button>
        </div>
    </div>
</div>
{{/each}}
{{/if}}
<script>

    $(document).ready(
        function () {
            let headingUploadBtn = document.getElementById("headingUploadButton");
            let fileUploadForm = document.getElementById("fileUploadForm");

            if (headingUploadBtn) {

                document.getElementById("headingUploadButton").addEventListener("click", async () => {
                    const uploadedHeading = document.getElementById("headingInput").value.trim();

                    if (!uploadedHeading) {
                        alert("Please enter a valid heading");
                        return;
                    }

                    const newHeading = new FormData();
                    newHeading.append("heading", uploadedHeading);

                    try {
                        const response = await fetch(window.location.href + 'heading', {
                            method: "POST",
                            body: newHeading,
                        });

                        if (response.ok) {
                            window.location.reload();
                        } else {
                            console.error("Error:", response.status);
                        }
                    } catch (error) {
                        console.error("Error:", error);
                    }
                });

            }
            if (fileUploadForm) {
                document.getElementById("fileUploadForm").addEventListener("submit", async (e) => {
                    e.preventDefault();

                    const selectedHeading = document.getElementById("headingDropdown").value.trim();
                    const uploadedFiles = document.getElementById("fileInput").files;

                    if (uploadedFiles.length === 0) {
                        return alert("Please select a file");
                    }

                    if (uploadedFiles.length > 1) {
                        return alert("Please select only one file");
                    }

                    if (!selectedHeading || !uploadedFiles) {
                        alert("Please select a heading and upload a file");
                        return;
                    }

                    const formData = new FormData();
                    Object.keys(uploadedFiles).forEach((key) => {
                        formData.append(uploadedFiles.item(key).name, uploadedFiles.item(key));
                    });
                    formData.append("heading", selectedHeading);

                    try {
                        const response = await fetch(window.location.href + 'file', {
                            method: "POST",
                            body: formData,
                        });

                        if (response.ok) {
                            console.log("File uploaded successfully");
                            window.location.reload();
                        } else {
                            console.log("File upload failed");
                        }
                    } catch (error) {
                        console.error("Error:", error);
                    }
                });

            }
            const downloadButtons = document.querySelectorAll('.downloadBtn');

            downloadButtons.forEach(button => {
                button.addEventListener('click', () => {
                    const parentDiv = button.closest('.card-header');
                    const filePath = parentDiv.querySelector('#filePath').innerText;
                    const fileName = parentDiv.querySelector('#fileName').innerText;
                    const url = window.location.href + `downloadFile?filePath=${filePath}&fileName=${fileName}`;
                    window.location.href = url;
                });
            });
        }
    )




</script>