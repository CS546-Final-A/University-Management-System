<div class="container-fluid">


    <div class="d-flex fs-2">
        <div class="my-auto"><img class="iconSwitch" src="/icons/repository.svg" alt="repository icon"> Course
            Repository
        </div>
    </div>
    <div class="col-12">
        <div>
            Course Name: {{courseName}}
        </div>
        <div>
            Course Description: {{courseDescription}}
        </div>


        {{#if (eq type "Professor")}}
        <div class="my-4"><button class="btn btn-info" data-bs-toggle="modal" data-bs-target="#exampleModal">New
                Heading</button>

            <button class="btn btn-info" data-bs-toggle="modal" data-bs-target="#exampleModal2">New File</button>
        </div>


        <!-- Modal -->
        <div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content glassEffect">
                    <div class="modal-header glassEffect">
                        <h1 class="modal-title fs-5" id="exampleModalLabel">New Heading</h1>
                        <button type="button" class="btn-close btn-info" data-bs-dismiss="modal"
                            aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <form id="moduleForm">
                            <div id="uploadHeadingDiv" class="form-floating mb-3">
                                <input class="form-control" type="text" id="headingInput" placeholder="" />
                                <label for="headingInput">Heading</label>
                            </div>

                            <input type="hidden" id="csrf" value="{{_csrf}}">
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                        <button id="headingUploadButton" class="btn btn-info">Upload Heading</button>
                    </div>
                </div>
            </div>
        </div>

        <div class="modal fade" id="exampleModal2" tabindex="-1" aria-labelledby="exampleModalLabel2"
            aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content glassEffect">
                    <div class="modal-header glassEffect">
                        <h1 class="modal-title fs-5" id="exampleModalLabel2">New File</h1>
                        <button type="button" class="btn-close btn-info" data-bs-dismiss="modal"
                            aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <form id="fileUploadForm">
                            <div class="mb-3">

                                <select id="headingDropdown" class="selectpicker form-control" data-live-search="true">
                                    {{#each headings}}
                                    <option value="{{this}}">{{this}}</option>
                                    {{/each}}
                                </select>
                            </div>

                            <div class="mb-3">
                                <label for="fileInput">Select File</label>
                                <input type="file" id="fileInput" accept=".pdf" />
                            </div>

                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                            <button type="submit" class="btn btn-info">Upload File</button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
        {{/if}}


        <div class="d-flex my-2">
            <div class="my-auto"><img class="iconSwitch" src="/icons/file.svg" alt="file icon"> Headings</div>
            <div class="my-auto text-muted fs-5" id="reportCount"></div>
            <div class="form-floating ms-auto fs-6">
                <input class="form-control" type="text" placeholder="" id="searchInput" />
                <label for="searchInput"><img class="iconSwitch" src="/icons/search.svg" alt="search icon">
                    Search</label>
            </div>
        </div>

        {{#each allFiles}}
        <div class="card my-4 glassEffect searchData">
            <div class="card-header glassEffect d-flex">
                {{this.name}}
            </div>
            <div class="card-body">
                {{#each this.files}}
                <div class="d-flex my-2 fileContainer">
                    <div class="my-auto fs-6 ms-3 fileName">{{this.name}}</div>
                    <div class="my-auto fs-6 ms-3 filePath" hidden>{{this.path}}</div>

                    {{!-- <div class="ms-auto">
                        <select id="linkModule_{{this.fileId}}" name="linkModule_{{this.fileId}}"
                            class="selectpicker form-control" data-live-search="true" multiple>
                            {{#each ../../dropdown}}
                            <option value="{{this.moduleId}}">{{this.sectionName}} - {{this.moduleName}}</option>
                            {{/each}}
                        </select>

                    </div>
                    <button class="ms-auto btn btn-info updateModuleBtn">Update Module</button> --}}
                    <button class="ms-auto btn btn-info downloadBtn">View</button>


                </div>

                {{/each}}
            </div>

        </div>
        {{/each}}

        <div class="modal fade" id="pdfModal" tabindex="-1" aria-labelledby="pdfModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="pdfModalLabel"></h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">

                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<script>
    function setError(error) {
        var toastRed1 = $("html").css("--toastRed1");
        $(".toast-header").css("background-color", toastRed1);
        $(".toast-header").css("color", "#000000");
        $(".toast-header .me-auto").html("&nbsp;&nbsp;Error");

        // $(".toast-body").css("background-color", toastRed2);
        $(".toast-body").css("color", "#000000");
        $(".toast-body").text(error);
        $("#liveToast").toast("show");
    }
    $(document).ready(function () {

        let headingUploadBtn = document.getElementById("headingUploadButton");
        let fileUploadForm = document.getElementById("fileUploadForm");

        if (headingUploadBtn) {

            document.getElementById("headingUploadButton").addEventListener("click", async () => {
                const uploadedHeading = document.getElementById("headingInput").value.trim();

                if (!uploadedHeading) {
                    alert("Please enter a valid heading");
                    return;
                }

                const newHeading = new FormData();
                newHeading.append("heading", uploadedHeading);

                try {
                    let response = await fetch(window.location.href + 'heading', {
                        method: "POST",
                        body: newHeading,
                    });

                    if (response.ok) {
                        window.location.reload();
                    } else {
                        response = await response.text()
                        response = JSON.parse(response)
                        if (response.error) {
                            throw response.error
                        } else {
                            throw "Unexpected response from server"
                        }
                    }
                } catch (error) {
                    setError(error);
                    console.error("Error:", error);
                }
            });

        }
        if (fileUploadForm) {
            document.getElementById("fileUploadForm").addEventListener("submit", async (e) => {
                e.preventDefault();

                const selectedHeading = document.getElementById("headingDropdown").value.trim();
                const uploadedFiles = document.getElementById("fileInput").files;

                if (uploadedFiles.length === 0) {
                    return alert("Please select a file");
                }

                if (uploadedFiles.length > 1) {
                    return alert("Please select only one file");
                }

                if (!selectedHeading || !uploadedFiles) {
                    alert("Please select a heading and upload a file");
                    return;
                }

                const formData = new FormData();
                Object.keys(uploadedFiles).forEach((key) => {
                    formData.append(uploadedFiles.item(key).name, uploadedFiles.item(key));
                });
                formData.append("heading", selectedHeading);

                try {
                    const response = await fetch(window.location.href + 'file', {
                        method: "POST",
                        body: formData,
                    });

                    if (response.ok) {
                        console.log("File uploaded successfully");
                        window.location.reload();
                    } else {
                        throw "File upload failed";
                    }
                } catch (error) {
                    setError(error);
                    console.error("Error:", error);
                }
            });

        }
        const downloadButtons = document.querySelectorAll('.downloadBtn');

        fileContainer = document.querySelectorAll('.fileContainer');

        fileContainer.forEach(container => {
            let fileNameElement = container.querySelector('.fileName');
            let filePathElement = container.querySelector('.filePath');

            let downloadBtn = container.querySelector('.downloadBtn');

            downloadBtn.addEventListener('click', () => {
                let filePath = filePathElement.innerText;
                let fileName = fileNameElement.innerText;

                $("#pdfModal").modal("show");

                const url = window.location.href + `downloadFile?filePath=${filePath}&fileName=${fileName}`;

                const pdfModalLabel = document.getElementById("pdfModalLabel");
                pdfModalLabel.innerText = fileName;

                const pdfModalBody = document.querySelector("#pdfModal .modal-body");
                pdfModalBody.innerHTML = `<iframe class="pdfViwer" src="${url}" ></iframe>`;
            });

        });


        $("#pdfModal .close").click(function () {
            $("#pdfModal").modal("hide");
        });

    });



</script>